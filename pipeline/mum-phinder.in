#!/usr/bin/env python3

import sys, time, argparse, subprocess, os.path, threading, tempfile

Description = """
Tool to build the index able to find Maximal Unique Matcher (MUMs) for 
higly repetive files using the approach described in

   "Computing Maximal Unique Matches with the r-index"
   by Sara Giuliani, Giuseppe Romana, and Massimiliano Rossi

The input file cannot contain the characters 0, 1 or 2 which are
used internally by the algorithm.

Report bugs to Sara Giuliani (sara.giuliani_01@univr.it) and
            to Massimiliano Rossi (rossi.m@ufl.edu)
"""

install = @USE_INSTALL_PATH@

dirname = os.path.dirname(os.path.abspath(__file__))

bigbwt_dirname = dirname
bigrepair_dirname = dirname
thresholds_dirname = dirname
compress_dirname = dirname
shaped_slp_dirname = dirname
repair_dirname = dirname
largeb_repair_dirname = dirname

if not install:

  bigbwt_dirname = os.path.join(dirname, "_deps/bigbwt-build")
  bigrepair_dirname = os.path.join(dirname, "_deps/bigrepair-build")
  thresholds_dirname = os.path.join(dirname, "_deps/pfp_thresholds-build/test/src")
  compress_dirname = os.path.join(dirname, "src")
  shaped_slp_dirname = os.path.join(dirname, "_deps/shaped_slp-build")
  repair_dirname = os.path.join(bigrepair_dirname, "repair")
  largeb_repair_dirname = os.path.join(bigrepair_dirname, "largeb_repair")

parse_exe = os.path.join(bigbwt_dirname, "pscan.x")
parse_fasta_exe = os.path.join(bigbwt_dirname, "newscan.x")
parseNT_exe = os.path.join(bigbwt_dirname, "newscanNT.x")

parsebwt_exe = os.path.join(bigbwt_dirname, "bwtparse")
parsebwt_exe64 = os.path.join(bigbwt_dirname, "bwtparse64")
pfbwt_exe = os.path.join(bigbwt_dirname, "pfbwt.x")
pfbwtNT_exe = os.path.join(bigbwt_dirname, "pfbwtNT.x")
pfbwt_exe64 = os.path.join(bigbwt_dirname, "pfbwt64.x")
pfbwtNT_exe64 = os.path.join(bigbwt_dirname, "pfbwtNT64.x")

pfp_thresholds = os.path.join(thresholds_dirname, "pfp_thresholds")
pfp_thresholds64 = os.path.join(thresholds_dirname, "pfp_thresholds64")
pfp_lcp = os.path.join(thresholds_dirname, "pfp_lcp_mums")
pfp_lcp64 = os.path.join(thresholds_dirname, "pfp_lcp_mums64")

compress_exe = os.path.join(compress_dirname, "compress_dictionary")

build_mum_phinder_exe = os.path.join(compress_dirname, "build_mum_phinder")

repair_exe = os.path.join(repair_dirname, "irepair")
largerepair_exe = os.path.join(largeb_repair_dirname, "largeb_irepair")
# despair for byte symbols
despair_exe = os.path.join(repair_dirname, "despair")
# despair for int32 symbols
integer_despair_exe = os.path.join(repair_dirname, "idespair")
# preprocess dict into a sequence of int32 representing both chars and distinct EOS
preprocess_exe = os.path.join(bigrepair_dirname, "procdic")
integer_preprocess_exe = os.path.join(bigrepair_dirname, "iprocdic")
# create final output file
postprocess_exe = os.path.join(bigrepair_dirname, "postproc")
integer_postprocess_exe = os.path.join(bigrepair_dirname, "ipostproc")

shaped_slp = os.path.join(shaped_slp_dirname, "SlpEncBuild")


query_mum_phinder_exe = os.path.join(compress_dirname, "query_mum_phinder")


def get_max_memory():
  try:
      from psutil import virtual_memory

      return virtual_memory().total
  except ImportError as e:
      print("psutil not found! Using system calls to get maximum memory size.")
      if sys.platform == "linux" or sys.platform == "linux2":
          return int(os.popen("free -b").readlines()[1].split()[1])
      elif sys.platform == "darwin":
          return int(os.popen("sysctl -n hw.memsize").readlines()[0].split()[0])


class PFPlcp(threading.Thread):
  def __init__(self, name, counter, args):
    threading.Thread.__init__(self)
    self.threadID = counter
    self.name = name
    self.counter = counter
    self.args = args

  def run(self):
    args = self.args
    logfile = args.logfile
    logfile_name = args.logfile_name

    start = time.time()
    parse_size = os.path.getsize(args.reference + ".parse") / 4
    dictionary_size = os.path.getsize(args.reference + ".dict")

    if parse_size >= (2**31 - 1) or dictionary_size >= (2**31 - 4):
        command = "{exe} {file} -w {wsize}".format(
            exe=pfp_lcp64,
            wsize=args.wsize,
            file=args.reference,
        )
    else:
        command = "{exe} {file} -w {wsize}".format(
            exe=pfp_lcp,
            wsize=args.wsize,
            file=args.reference,
        )

    command += " -r"

    print("==== Computing BWT with SA and LCP samples. Command:", command)
    if execute_command(command, logfile, logfile_name) != True:
        return

    print("LCP step Elapsed time: {0:.4f}".format(time.time() - start))


class bigrepair(threading.Thread):
  def __init__(self, name, counter, args):
    threading.Thread.__init__(self)
    self.threadID = counter
    self.name = name
    self.counter = counter
    self.args = args

  def run(self):
    args = self.args
    logfile = args.logfile
    logfile_name = args.logfile_name
    print(
        "{} bigrepair started!".format(self.getName()), flush=True
    )  # "Thread-x started!"

    mem = get_max_memory()
    repair_mem = round(mem / 1024 / 1024)  # total physical memory available in MB
    print("RePair maximum memory: {}".format(repair_mem), flush=True)

    sstart = time.time()
    # ---- compress the dictionary
    start = time.time()
    exe = compress_exe
    command = "{exe} {file} -w {wsize} -p {modulus}".format(
        exe=os.path.join(bigrepair_dirname, exe),
        file=args.reference,
        wsize=args.wsize,
        modulus=args.mod,
    )
    print("==== Compressing the dictionary.\nCommand:", command, flush=True)
    if execute_command(command, logfile, logfile_name) != True:
        return
    preprocess_time = time.time() - start
    print("Compression time: {0:.4f}".format(preprocess_time), flush=True)

    # ---- preprocess the dictionary
    start = time.time()
    # exe = integer_preprocess_exe if args.i else preprocess_exe
    exe = preprocess_exe
    command = "{exe} {file}.dicz".format(
        exe=os.path.join(bigrepair_dirname, exe), file=args.reference
    )
    print("==== Preprocessing the dictionary.\nCommand:", command, flush=True)
    if execute_command(command, logfile, logfile_name) != True:
        return
    preprocess_time = time.time() - start
    print("Preprocess time: {0:.4f}".format(preprocess_time), flush=True)

    # ---- apply repair to the modified dictionary
    start = time.time()
    # if args.m==0:
    # command = "{exe} {file}.dicz.int".format(
    #         exe = os.path.join(bigrepair_dirname,repair_exe), file=args.reference)
    # else:
    command = "{exe} {file}.dicz.int {mb}".format(
        mb=repair_mem,
        exe=os.path.join(bigrepair_dirname, largerepair_exe),
        file=args.reference,
    )
    print("==== Repair dictionary.\nCommand:", command, flush=True)
    if execute_command(command, logfile, logfile_name) != True:
        return
    repair_time = time.time() - start
    print("repair(dict) time: {0:.4f}".format(repair_time), flush=True)

    # ---- apply repair to the parse
    start = time.time()
    # if args.m==0:
    # command = "{exe} {file}.parse".format(
    #         exe = os.path.join(bigrepair_dirname,repair_exe), file=args.reference)
    # else:
    command = "{exe} {file}.parse {mb}".format(
        mb=repair_mem,
        exe=os.path.join(bigrepair_dirname, largerepair_exe),
        file=args.reference,
    )
    print("==== Repair parse.\nCommand:", command, flush=True)
    if execute_command(command, logfile, logfile_name) != True:
        return
    repair_time = time.time() - start
    print("repair(parse) time: {0:.4f}".format(repair_time), flush=True)

    # ---- postprocess
    start = time.time()
    exe = postprocess_exe
    # exe = integer_postprocess_exe if args.i else postprocess_exe
    command = "{exe} {file}".format(
        exe=os.path.join(bigrepair_dirname, exe), file=args.reference
    )
    print("==== Postprocessing the dictionary.\nCommand:", command, flush=True)
    fp = tempfile.TemporaryFile()
    if execute_command(command, logfile, logfile_name, fp) != True:
        return

    postprocess_time = time.time() - start
    print("Postprocess time: {0:.4f}".format(postprocess_time), flush=True)

    total_time = time.time() - sstart
    print("Elapsed time: {0:.4f}".format(total_time), flush=True)
    # get the estimated compressed size
    # fp.seek(0); estimated_compression = int(fp.read().split()[-1]); fp.close()

    # if args.r:
    #   compression_report(args.reference,ctph_time,total_time,estimated_compression)

    # delete temporary parsing/dictionary files

    command = "rm -f {file}.parse.C {file}.parse.R {file}.dicz.int {file}.dicz.int.C {file}.dicz.int.R".format(
        file=args.reference
    )
    if execute_command(command, logfile, logfile_name) != True:
        return
    # ---- repair done

    print("==== Done", flush=True)

    print("==== Computing final bigrepair. Command:", command, flush=True)
    if execute_command(command, logfile, logfile_name) != True:
        return
    print(
        "bigrepair Elapsed time: {0:.4f}".format(time.time() - sstart), flush=True
    )


class SLP(threading.Thread):
  def __init__(self, name, counter, args):
    threading.Thread.__init__(self)
    self.threadID = counter
    self.name = name
    self.counter = counter
    self.args = args

  def run(self):
    args = self.args
    logfile = args.logfile
    logfile_name = args.logfile_name
    print("{} bigrepair started!".format(self.getName()))  # "Thread-x started!"

    sstart = time.time()
    # ---- compress the dictionary
    start = time.time()
    exe = shaped_slp
    command = "{exe} -i {file} -o {file}.slp -e SelfShapedSlp_SdSd_Sd -f Bigrepair".format(
        exe=os.path.join(bigrepair_dirname, exe), file=args.reference
    )
    print("==== ShapedSLP construction.\nCommand:", command)
    if execute_command(command, logfile, logfile_name) != True:
        return
    preprocess_time = time.time() - start
    print("ShapedSLP construction time: {0:.4f}".format(preprocess_time))

    print("==== Done")

    print("ShapedSLP Elapsed time: {0:.4f}".format(time.time() - sstart))


class MUM_PHINDER(threading.Thread):
  def __init__(self, name, counter, args):
    threading.Thread.__init__(self)
    self.threadID = counter
    self.name = name
    self.counter = counter
    self.args = args

  def run(self):
    args = self.args
    logfile = args.logfile
    logfile_name = args.logfile_name
    print("{} build_phoni started!".format(self.getName()))  # "Thread-x started!"

    sstart = time.time()
    # ---- compress the dictionary
    start = time.time()
    exe = build_mum_phinder_exe
    command = "{exe} {file}".format(
        exe=os.path.join(bigrepair_dirname, exe), file=args.reference
    )
    print("==== MUM_PHINDER construction.\nCommand:", command)
    if execute_command(command, logfile, logfile_name) != True:
        return
    preprocess_time = time.time() - start
    print("MUM_PHINDER construction time: {0:.4f}".format(preprocess_time))

    print("==== Done")

    print("MUM_PHINDER Elapsed time: {0:.4f}".format(time.time() - sstart))


def build(args):

    if (
        args.f
        and args.threads > 0
        and (
            ".fq" in args.reference
            or ".fastq" in args.reference
            or ".fnq" in args.reference
        )
    ):
        print(
            "mum-phinder does not current support FASTQ format! Exiting...", flush=True
        )
        return

    filename = os.path.basename(args.reference)
    if args.output != ".":
        logfile_name = args.output + ".mum-phinder.log"
    else:
        logfile_name = args.reference + ".mum-phinder.log"

    # get main bigbwt directory
    args.exe_dir = os.path.split(sys.argv[0])[0]
    print("Sending logging messages to file:", logfile_name, flush=True)
    with open(logfile_name, "a") as logfile:
        args.logfile = logfile
        args.logfile_name = logfile_name
        # ---------- parsing of the input file
        start0 = start = time.time()
        if args.threads > 0:
            if args.f:
                # command = "{exe} {file} -w {wsize} -p {modulus} -t {th} -f".format(
                command = "{exe} {file} -w {wsize} -p {modulus} -t 1 -f".format(
                    exe=os.path.join(args.exe_dir, parse_fasta_exe),
                    wsize=args.wsize,
                    modulus=args.mod,
                    th=args.threads,
                    file=args.reference,
                )
            else:
                command = "{exe} {file} -w {wsize} -p {modulus} -t {th}".format(
                    exe=os.path.join(args.exe_dir, parse_exe),
                    wsize=args.wsize,
                    modulus=args.mod,
                    th=args.threads,
                    file=args.reference,
                )
        else:
            if args.f:
                command = "{exe} {file} -w {wsize} -p {modulus} -f".format(
                    exe=os.path.join(args.exe_dir, parseNT_exe),
                    wsize=args.wsize,
                    modulus=args.mod,
                    th=args.threads,
                    file=args.reference,
                )
            else:
                command = "{exe} {file} -w {wsize} -p {modulus}".format(
                    exe=os.path.join(args.exe_dir, parseNT_exe),
                    wsize=args.wsize,
                    modulus=args.mod,
                    file=args.reference,
                )
        if args.v:
            command += " -v"
        # if args.f: command += " -f"
        command += " -s"
        print("==== Parsing. Command:", command, flush=True)
        if execute_command(command, logfile, logfile_name) != True:
            return
        print("Elapsed time: {0:.4f}".format(time.time() - start), flush=True)
        if args.parsing:
            # delete temporary parsing files
            # check format when -t is used
            command = "rm -f {file}.parse_old {file}.last".format(file=args.reference)
            if execute_command(command, logfile, logfile_name) != True:
                return
            print("==== Stopping after the parsing phase as requested", flush=True)
            return
        elif args.compress:
            # save parsing files
            start = time.time()
            command = "tar -cJf {file}.parse.txz {file}.parse {file}.dicz".format(
                file=args.reference
            )
            print("==== Compressing. Command:", command, flush=True)
            if (
                execute_command(command, logfile, logfile_name, env={"XZ_OPT": "-9"})
                != True
            ):
                return
            print("Elapsed time: {0:.4f}".format(time.time() - start), flush=True)
            delete_temp_files(args, logfile, logfile_name)
            print("==== Done: Parsing output xz-compressed as requested", flush=True)
            return

        # ----------- computation of the PFP data structures

        pf_lcp_thread = PFPlcp(
            name="{}".format(args.reference), args=args, counter=1
        )  
        pf_lcp_thread.start() 
        pf_lcp_thread.join()

        bigrepair_thread = bigrepair(
            name="{}".format(args.reference), args=args, counter=2
        )  
        bigrepair_thread.start() 
        bigrepair_thread.join()

        SLP_thread = SLP(
            name="{}".format(args.reference), args=args, counter=2
        )  
        SLP_thread.start() 
        SLP_thread.join()

        MUM_PHINDER_thread = MUM_PHINDER(
            name="{}".format(args.reference), args=args, counter=2
        )  
        MUM_PHINDER_thread.start() 
        MUM_PHINDER_thread.join()

        print(
            "Total construction time: {0:.4f}".format(time.time() - start0), flush=True
        )
        # ---- print elapsed time to file
        command = "echo Total construction time: {0:.4f}".format(time.time() - start0)
        if execute_command(command, logfile, logfile_name) != True:
            return

        # ---- delete intermediate files
        delete_temp_files(args, logfile, logfile_name)

    print("==== Done", flush=True)


class query_helper(threading.Thread):
    def __init__(self, name, counter, args, exe):
        threading.Thread.__init__(self)
        self.threadID = counter
        self.name = name
        self.counter = counter
        self.args = args
        self.exe = exe

    def run(self):
        args = self.args
        exe = self.exe
        exe_name = self.name
        logfile = args.logfile
        logfile_name = args.logfile_name
        # ----------- computation of the BWT of the parsing
        # print("==== Computing {name}. ".format(name=exe_name), flush=True)
        start = time.time()

        command = "{exe} {file} -p {query}".format(
            exe=os.path.join(args.exe_dir, exe), file=args.index, query=args.pattern
        )
        if args.output != ".":
            command += " -o {}".format(args.output)

        print(
            "==== Running {name}. Command:".format(name=exe_name), command, flush=True
        )
        if execute_command(command, logfile, logfile_name) != True:
            return
        print(
            "==== Running {name} Elapsed time: {0:.4f}".format(
                time.time() - start, name=exe_name
            ),
            flush=True,
        )
        # ---- print elapsed time to file
        command = "echo Total query time: {0:.4f}".format(time.time() - start)
        if execute_command(command, logfile, logfile_name) != True:
            return


def query(args):
    logfile_name = args.pattern + "." + args.which + ".log"
    if args.output != ".":
        logfile_name = args.output + "." + args.which + ".log"
    # get main bigbwt directory
    args.exe_dir = os.path.split(sys.argv[0])[0]
    print("Sending logging messages to file:", logfile_name, flush=True)
    with open(logfile_name, "a") as logfile:
        args.logfile = logfile
        args.logfile_name = logfile_name

        run_mum_phinder = query_helper(
            name="MONI-MS", args=args, counter=2, exe=query_mum_phinder_exe
        )
        run_mum_phinder.start()
        run_mum_phinder.join()


def getGitDesc():
    branch = (
        subprocess.check_output(
            "git rev-parse --abbrev-ref HEAD", shell=True, cwd=dirname
        )
        .strip()
        .decode("utf-8")
    )
    commit = (
        subprocess.check_output("git rev-parse HEAD", shell=True, cwd=dirname)
        .strip()
        .decode("utf-8")
    )
    try:
        tag = (
            subprocess.check_output(
                "git describe --exact-match {commit_id}".format(commit_id=commit),
                shell=True,
                cwd=dirname,
            )
            .strip()
            .decode("utf-8")
        )
    except subprocess.CalledProcessError as e:
        tag = ""
    return "branch: {branch}\n   tag: {tag}\ncommit: {commit}".format(
        branch=branch, tag=tag, commit=commit
    )


def base(args):
    if args.version:
        print(getGitDesc())


def get_args():
    parser = argparse.ArgumentParser(description=Description, formatter_class=argparse.RawTextHelpFormatter)
    subparsers = parser.add_subparsers(title="subcommands", description="valid subcommands", help="additional help")
    build_parser = subparsers.add_parser("build",   help="build the index for the reference",formatter_class=argparse.ArgumentDefaultsHelpFormatter,) 
    ms_parser = subparsers.add_parser("mums",       help="compute the maximal exact matches",formatter_class=argparse.ArgumentDefaultsHelpFormatter,)

    parser.add_argument("--version", help="print the version number", action="store_true")
    parser.set_defaults(which="base")

    build_parser.add_argument("-r", "--reference",  help="reference file name", type=str, required=True)
    build_parser.add_argument("-o", "--output",     help="output directory path", type=str, default=".")
    build_parser.add_argument("-w", "--wsize",      help="sliding window size", default=10, type=int)
    build_parser.add_argument("-p", "--mod",        help="hash modulus", default=100, type=int)
    build_parser.add_argument("-t", "--threads",    help="number of helper threads", default=0, type=int)
    build_parser.add_argument("-k",                 help="keep temporary files", action="store_true")
    build_parser.add_argument("-v",                 help="verbose", action="store_true")
    build_parser.add_argument("-f",                 help="read fasta", action="store_true")
    parser.add_argument("--parsing",                help="stop after the parsing phase (debug only)",action="store_true",)
    parser.add_argument("--compress",               help="compress output of the parsing phase (debug only)",action="store_true",)
    build_parser.set_defaults(which="build")

    ms_parser.add_argument("-i", "--index",         help="reference index folder", type=str, required=True)
    ms_parser.add_argument("-p", "--pattern",       help="the input query", type=str, required=True)
    ms_parser.add_argument("-o", "--output",        help="output file prefix", type=str, default=".")
    ms_parser.add_argument("-t", "--threads",       help="number of helper threads", default=1, type=int)
    ms_parser.set_defaults(which="mums")
    return parser.parse_args()

def main():
    args = get_args()

    if args.which == "base":
        base(args)
    elif args.which == "build":
        build(args)
    elif args.which == "mums":
        query(args)


# delete intermediate files
def delete_temp_files(args, logfile, logfile_name):
    if args.k == False:
        print("==== Deleting temporary files.")  # no need to show the command
        command = "rm -f {file}.parse_old {file}.last {file}.bwlast {file}.ilist {file}.bwt.heads {file}.bwt.len {file}.C {file}.dict {file}.dicz {file}.dicz.len {file}.esa {file}.mums.lcp {file}.occ {file}.parse {file}.R {file}.ssa".format(
            file=args.reference
        )
        # command = "rm -f {file}.parse {file}.parse_old {file}.last {file}.bwlast {file}.dicz {file}.ilist {file}.occ".format(file=args.reference)
        if execute_command(command, logfile, logfile_name) != True:
            return
        for i in range(args.threads):
            command = "rm -f {file}.{i}.parse_old {file}.{i}.last".format(
                file=args.reference, i=i
            )
            if execute_command(command, logfile, logfile_name) != True:
                return

        command = "rm -f {file}.sai {file}.bwsai".format(file=args.reference)
        if execute_command(command, logfile, logfile_name) != True:
            return
        for i in range(args.threads):
            command = "rm -f {file}.{i}.sai".format(file=args.reference, i=i)
            if execute_command(command, logfile, logfile_name) != True:
                return


# execute command: return True is everything OK, False otherwise
def execute_command(command, logfile, logfile_name, outfile=None, env=None):
    try:
        if not outfile:
            outfile = logfile
        subprocess.check_call(command.split(), stdout=logfile, stderr=logfile, env=env)
    except subprocess.CalledProcessError:
        print("Error executing command line:")
        print("\t" + command)
        print("Check log file: " + logfile_name)
        return False
    return True


if __name__ == "__main__":
    main()
