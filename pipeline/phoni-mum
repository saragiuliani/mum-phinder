#!/usr/bin/env python3

# Edited from bigbwt script file

import sys, time, argparse, subprocess, os.path, threading, tempfile
from psutil import virtual_memory

Description = """
Tool to build the BWT and the Thresholds for higly repetive files using the approach
described in

   "Constructing thresholds directly from prefix-free parsing"
   by Christina Boucher, Travis Gagie, and Massimiliano Rossi

The input file cannot contain the characters 0, 1 or 2 which are
used internally by the algorithm.
"""

dirname                 = os.path.dirname(os.path.abspath(__file__))

bigbwt_dirname          = os.path.join(dirname, "_deps/bigbwt-build")
bigrepair_dirname       = os.path.join(dirname, "_deps/bigrepair-src")
thresholds_dirname      = os.path.join(dirname, "_deps/pfp_thresholds-build/test/src")
compress_dirname        = os.path.join(dirname, "test/src")
rlbwt_dirname           = os.path.join(dirname, "test/src")
phoni_dirname           = os.path.join(dirname, "test/src")
shaped_slp_dirname      = os.path.join(dirname, "_deps/shaped_slp-build")

parse_exe               = os.path.join(bigbwt_dirname, "pscan.x")
parse_fasta_exe         = os.path.join(bigbwt_dirname, "newscan.x")
parseNT_exe             = os.path.join(bigbwt_dirname, "newscanNT.x")

parsebwt_exe    =  os.path.join(bigbwt_dirname, "bwtparse")
parsebwt_exe64  =  os.path.join(bigbwt_dirname, "bwtparse64")
pfbwt_exe       =  os.path.join(bigbwt_dirname, "pfbwt.x")
pfbwtNT_exe     =  os.path.join(bigbwt_dirname, "pfbwtNT.x")
pfbwt_exe64     =  os.path.join(bigbwt_dirname, "pfbwt64.x")
pfbwtNT_exe64   =  os.path.join(bigbwt_dirname, "pfbwtNT64.x")

pfp_thresholds          = os.path.join(thresholds_dirname, "pfp_thresholds")
pfp_thresholds64        = os.path.join(thresholds_dirname, "pfp_thresholds64")
pfp_lcp                 = os.path.join(thresholds_dirname, "pfp_lcp_mums")
pfp_lcp64               = os.path.join(thresholds_dirname, "pfp_lcp_mums64")

compress_exe            = os.path.join(compress_dirname, "compress_dictionary")

rlbwt_exe               = os.path.join(rlbwt_dirname, "rlbwt")

build_phoni_exe         = os.path.join(phoni_dirname, "build_phoni")

repair_exe              = os.path.join(bigrepair_dirname,"repair/irepair")
largerepair_exe         = os.path.join(bigrepair_dirname,"largeb_repair/irepair")
# despair for byte symbols 
despair_exe             = os.path.join(bigrepair_dirname,"repair/despair")
# despair for int32 symbols 
integer_despair_exe     = os.path.join(bigrepair_dirname,"repair/idespair")
# preprocess dict into a sequence of int32 representing both chars and distinct EOS 
preprocess_exe          = os.path.join(bigrepair_dirname,"procdic")
integer_preprocess_exe  = os.path.join(bigrepair_dirname,"iprocdic")
# create final output file
postprocess_exe         = os.path.join(bigrepair_dirname,"postproc")
integer_postprocess_exe = os.path.join(bigrepair_dirname,"ipostproc")

shaped_slp              = os.path.join(shaped_slp_dirname, "SlpEncBuild")


class PFPthresholds(threading.Thread):
    def __init__(self, name, counter, args):
        threading.Thread.__init__(self)
        self.threadID = counter
        self.name = name
        self.counter = counter
        self.args = args

    def run(self):
      args = self.args
      logfile = args.logfile
      logfile_name = args.logfile_name
      print("{} PFP started!".format(self.getName()))        # "Thread-x started!"

      start = time.time()
      parse_size = os.path.getsize(args.input+".parse")/4
      dictionary_size = os.path.getsize(args.input+".dict")

      if(parse_size >=  (2**31-1) or dictionary_size >=  (2**31-4) ):
        command = "{exe} {file} -w {wsize}".format(
                  exe = os.path.join(args.bigbwt_dir,pfp_thresholds64),
                  wsize=args.wsize, file=args.input)
      else:
        command = "{exe} {file} -w {wsize}".format(
            exe = os.path.join(args.bigbwt_dir,pfp_thresholds),
            wsize=args.wsize, file=args.input)

      # if args.s: command += " -s"
      if args.m: command += " -m"
      
      print("==== Computing Thresholds. Command:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      print("Thresholds Elapsed time: {0:.4f}".format(time.time()-start));


class PFPlcp(threading.Thread):
    def __init__(self, name, counter, args):
        threading.Thread.__init__(self)
        self.threadID = counter
        self.name = name
        self.counter = counter
        self.args = args

    def run(self):
      args = self.args
      logfile = args.logfile
      logfile_name = args.logfile_name
      print("{} PFP started!".format(self.getName()))        # "Thread-x started!"

      start = time.time()
      parse_size = os.path.getsize(args.input+".parse")/4
      dictionary_size = os.path.getsize(args.input+".dict")

      if(parse_size >=  (2**31-1) or dictionary_size >=  (2**31-4) ):
        command = "{exe} {file} -w {wsize}".format(
                  exe = os.path.join(args.bigbwt_dir,pfp_lcp64),
                  wsize=args.wsize, file=args.input)
      else:
        command = "{exe} {file} -w {wsize}".format(
            exe = os.path.join(args.bigbwt_dir,pfp_lcp),
            wsize=args.wsize, file=args.input)

      # if args.s: command += " -s"
      if args.m: command += " -m"
      command += " -r"
      
      print("==== Computing LCP array. Command:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      
      # command = "{exe} {file}".format(
      #     exe = rlbwt_exe, file=args.input + ".bwt")
                
      # print("==== Run-length encoding the BWT. Command:", command)
      # if(execute_command(command,logfile,logfile_name)!=True):
      #   return
      print("LCP Elapsed time: {0:.4f}".format(time.time()-start));



class bigrepair(threading.Thread):
  def __init__(self, name, counter, args):
        threading.Thread.__init__(self)
        self.threadID = counter
        self.name = name
        self.counter = counter
        self.args = args

  def run(self):
      args = self.args
      logfile = args.logfile
      logfile_name = args.logfile_name
      print("{} bigrepair started!".format(self.getName()))        # "Thread-x started!"

      mem = virtual_memory()
      repair_mem  = round(mem.total / 1024 / 1024) # total physical memory available in MB
      print("RePair maximum memory: {}".format(repair_mem))

      sstart = time.time()
      # ---- compress the dictionary 
      start = time.time()
      exe = compress_exe
      command = "{exe} {file} -w {wsize} -p {modulus}".format(
                exe = os.path.join(bigrepair_dirname, exe), file=args.input, wsize=args.wsize, modulus=args.mod)
      print("==== Compressing the dictionary.\nCommand:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      preprocess_time = time.time()-start
      print("Compression time: {0:.4f}".format(preprocess_time))
  
      # ---- preprocess the dictionary 
      start = time.time()
      # exe = integer_preprocess_exe if args.i else preprocess_exe
      exe = preprocess_exe
      command = "{exe} {file}.dicz".format(
                exe = os.path.join(bigrepair_dirname, exe), file=args.input)
      print("==== Preprocessing the dictionary.\nCommand:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      preprocess_time = time.time()-start
      print("Preprocess time: {0:.4f}".format(preprocess_time))
  
      # ---- apply repair to the modified dictionary
      start = time.time()
      # if args.m==0:     
        # command = "{exe} {file}.dicz.int".format(
        #         exe = os.path.join(bigrepair_dirname,repair_exe), file=args.input)
      # else:
      command = "{exe} {file}.dicz.int {mb}".format(mb=repair_mem,
              exe = os.path.join(bigrepair_dirname,largerepair_exe), file=args.input)
      print("==== Repair dictionary.\nCommand:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
       return
      repair_time = time.time()-start
      print("repair(dict) time: {0:.4f}".format(repair_time))
      
      # ---- apply repair to the parse     
      start = time.time()
      # if args.m==0:     
        # command = "{exe} {file}.parse".format(
        #         exe = os.path.join(bigrepair_dirname,repair_exe), file=args.input)
      # else:
      command = "{exe} {file}.parse {mb}".format(mb=repair_mem,
              exe = os.path.join(bigrepair_dirname,largerepair_exe), file=args.input)
      print("==== Repair parse.\nCommand:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
       return
      repair_time = time.time()-start
      print("repair(parse) time: {0:.4f}".format(repair_time))

      # ---- postprocess
      start = time.time()
      exe = postprocess_exe
      # exe = integer_postprocess_exe if args.i else postprocess_exe
      command = "{exe} {file}".format(
                exe = os.path.join(bigrepair_dirname,exe), file=args.input)
      print("==== Postprocessing the dictionary.\nCommand:", command)
      fp = tempfile.TemporaryFile()
      if(execute_command(command,logfile,logfile_name,fp)!=True):
        return

      postprocess_time = time.time()-start
      print("Postprocess time: {0:.4f}".format(postprocess_time))

      total_time = time.time()-sstart
      print("Elapsed time: {0:.4f}".format(total_time))
      # get the estimated compressed size
      # fp.seek(0); estimated_compression = int(fp.read().split()[-1]); fp.close()
      
      # if args.r:
      #   compression_report(args.input,ctph_time,total_time,estimated_compression)
      
      # delete temporary parsing/dictionary files

      command = "rm -f {file}.parse.C {file}.parse.R {file}.dicz.int {file}.dicz.int.C {file}.dicz.int.R".format(file=args.input)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      # ---- repair done   

      print("==== Done")

      
      print("==== Computing final bigrepair. Command:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      print("bigrepair Elapsed time: {0:.4f}".format(time.time()-sstart))      

class SLP(threading.Thread):
  def __init__(self, name, counter, args):
        threading.Thread.__init__(self)
        self.threadID = counter
        self.name = name
        self.counter = counter
        self.args = args

  def run(self):
      args = self.args
      logfile = args.logfile
      logfile_name = args.logfile_name
      print("{} bigrepair started!".format(self.getName()))        # "Thread-x started!"

      sstart = time.time()
      # ---- compress the dictionary 
      start = time.time()
      exe = shaped_slp
      command = "{exe} -i {file} -o {file}.slp -e SelfShapedSlp_SdSd_Sd -f Bigrepair".format(
                exe = os.path.join(bigrepair_dirname, exe), file=args.input)
      print("==== ShapedSLP construction.\nCommand:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      preprocess_time = time.time()-start
      print("ShapedSLP construction time: {0:.4f}".format(preprocess_time))
  
      print("==== Done")

      print("ShapedSLP Elapsed time: {0:.4f}".format(time.time()-sstart))      


class PHONI(threading.Thread):
  def __init__(self, name, counter, args):
        threading.Thread.__init__(self)
        self.threadID = counter
        self.name = name
        self.counter = counter
        self.args = args

  def run(self):
      args = self.args
      logfile = args.logfile
      logfile_name = args.logfile_name
      print("{} build_phoni started!".format(self.getName()))        # "Thread-x started!"

      sstart = time.time()
      # ---- compress the dictionary 
      start = time.time()
      exe = build_phoni_exe
      command = "{exe} {file}".format(
                exe = os.path.join(bigrepair_dirname, exe), file=args.input)
      print("==== PHONI construction.\nCommand:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      preprocess_time = time.time()-start
      print("PHONI construction time: {0:.4f}".format(preprocess_time))
  
      print("==== Done")

      print("PHONI Elapsed time: {0:.4f}".format(time.time()-sstart))      



class BWT(threading.Thread):
  def __init__(self, name, counter, args):
        threading.Thread.__init__(self)
        self.threadID = counter
        self.name = name
        self.counter = counter
        self.args = args

  def run(self):
      args = self.args
      logfile = args.logfile
      logfile_name = args.logfile_name
      print("{} BWT started!".format(self.getName()))        # "Thread-x started!"

      # ----------- computation of the BWT of the parsing
      start = time.time()
      parse_size = os.path.getsize(args.input+".parse")/4
      if(parse_size >=  (2**32-1) ):
        print("Sorry, the parse contains %d words" %  parse_size )
        print("which is more than my current limit 2^32-2")
        print("Please re-run the program with a larger modulus (currently %d)" % args.mod)
        sys.exit(1)  
      elif(parse_size >=  (2**31-1) ):
        command = "{exe} {file}".format(
                exe = os.path.join(args.bigbwt_dir,parsebwt_exe64), file=args.input)
      else:
        command = "{exe} {file}".format(
                exe = os.path.join(args.bigbwt_dir,parsebwt_exe), file=args.input)
      # if (args.s or args.e or args.S): command += " -s"
      command += " -s"
      if (args.t>0): command += " -t " + str(args.t)
      print("==== Computing BWT of parsing. Command:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      print("Elapsed time: {0:.4f}".format(time.time()-start));      
      
      # ----------- compute final BWT using dictionary and BWT of parse    
      start = time.time()     
      if(os.path.getsize(args.input+".dict") >=  (2**31-4) ):
        # 64 bit version with and without threads
        # if args.t>0 and args.s==False and args.e==False:
        #   command = "{exe} -w {wsize} {file} -t {th}".format(
        #         exe = os.path.join(args.bigbwt_dir,pfbwt_exe64),
        #         wsize=args.wsize, file=args.input, th=args.t)
        # else:
        command = "{exe} -w {wsize} {file}".format( 
                exe = os.path.join(args.bigbwt_dir,pfbwtNT_exe64),
                wsize=args.wsize, file=args.input)        
      else:  # 32 bit version
        # if args.t>0 and args.s==False and args.e==False:
        #   command = "{exe} -w {wsize} {file} -t {th}".format(
        #           exe = os.path.join(args.bigbwt_dir,pfbwt_exe),
        #           wsize=args.wsize, file=args.input, th=args.t)
        # else:
        command = "{exe} -w {wsize} {file}".format(
                exe = os.path.join(args.bigbwt_dir,pfbwtNT_exe),
                wsize=args.wsize, file=args.input)
      command += " -s"
      command += " -e"
      # if args.S: command += " -S"
      
      print("==== Computing final BWT. Command:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
        return

      command = "{exe} {file}".format(
                exe = rlbwt_exe, file=args.input + ".bwt")
                
      print("==== Run-length encoding the BWT. Command:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      print("BWT Elapsed time: {0:.4f}".format(time.time()-start))      




def main():
  parser = argparse.ArgumentParser(description=Description, formatter_class=argparse.RawTextHelpFormatter)
  parser.add_argument('input', help='input file name', type=str)
  parser.add_argument('-w', '--wsize', help='sliding window size (def. 10)', default=10, type=int)
  parser.add_argument('-p', '--mod', help='hash modulus (def. 100)', default=100, type=int)
  parser.add_argument('-t', help='number of helper threads (def. None)', default=0, type=int)
  parser.add_argument('-s',  help='compute the start run-length sampled Suffix Array',action='store_true')
  parser.add_argument('-e',  help='compute the end run-length sampled Suffix Array',action='store_true')
 # parser.add_argument('-S',  help='compute the full Suffix Array',action='store_true')
  parser.add_argument('-k',  help='keep temporary files',action='store_true')
  parser.add_argument('-v',  help='verbose',action='store_true')
 # parser.add_argument('-c',  help='check BWT using SACA-K',action='store_true')
  parser.add_argument('-f', help='read fasta',action='store_true')
  # parser.add_argument('-s', help='store ds',action='store_true')
  parser.add_argument('-m', help='print memory usage',action='store_true')
 # parser.add_argument('--sum', help='compute output files sha256sum',action='store_true')
  parser.add_argument('--parsing',  help='stop after the parsing phase (debug only)',action='store_true')
  parser.add_argument('--compress',  help='compress output of the parsing phase (debug only)',action='store_true')
  args = parser.parse_args()

  if args.f and args.t > 0 and (".fq" in args.input or ".fastq" in args.input or ".fnq" in args.input):
    print("moni does not current support FASTQ format! Exiting...")
    return




  

  logfile_name = args.input + ".moni.log"
  # get main bigbwt directory
  args.bigbwt_dir = os.path.split(sys.argv[0])[0]
  print("Sending logging messages to file:", logfile_name)
  with open(logfile_name,"a") as logfile:
    args.logfile = logfile
    args.logfile_name = logfile_name
    # ---------- parsing of the input file
    start0 = start = time.time()
    if args.t>0:
      if args.f:
        command = "{exe} {file} -w {wsize} -p {modulus} -t {th} -f".format(
                exe = os.path.join(args.bigbwt_dir,parse_fasta_exe),
                wsize=args.wsize, modulus = args.mod, th=args.t, file=args.input)
      else:
        command = "{exe} {file} -w {wsize} -p {modulus} -t {th}".format(
                exe = os.path.join(args.bigbwt_dir,parse_exe),
                wsize=args.wsize, modulus = args.mod, th=args.t, file=args.input)
    else:
      if args.f:
        command = "{exe} {file} -w {wsize} -p {modulus} -f".format(
                exe = os.path.join(args.bigbwt_dir,parseNT_exe),
                wsize=args.wsize, modulus = args.mod, th=args.t, file=args.input)
      else:
        command = "{exe} {file} -w {wsize} -p {modulus}".format(
                exe = os.path.join(args.bigbwt_dir,parseNT_exe),
                wsize=args.wsize, modulus = args.mod, file=args.input)
    if args.v: command += " -v"
    # if args.f: command += " -f"
    command += " -s"
    print("==== Parsing. Command:", command)
    if(execute_command(command,logfile,logfile_name)!=True):
      return
    print("Elapsed time: {0:.4f}".format(time.time()-start))
    if args.parsing:
      # delete temporary parsing files
      command = "rm -f {file}.parse_old {file}.last".format(file=args.input) # check format when -t is used
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      print("==== Stopping after the parsing phase as requested")
      return
    elif args.compress:
      # save parsing files
      start = time.time()
      command = "tar -cJf {file}.parse.txz {file}.parse {file}.dicz".format(file=args.input)
      print("==== Compressing. Command:", command)
      if(execute_command(command,logfile,logfile_name,env={"XZ_OPT":"-9"})!=True):
        return
      print("Elapsed time: {0:.4f}".format(time.time()-start))
      delete_temp_files(args,logfile,logfile_name)
      print("==== Done: Parsing output xz-compressed as requested")
      return

    # ----------- computation of the PFP data structures
    
    # bigbwt_thread = BWT(name = "{}".format(args.input), args=args, counter=1)  # ...Instantiate a thread and pass a unique ID to it
    # bigbwt_thread.start()                                       # ...Start the thread, invoke the run method
    # bigbwt_thread.join()

    pf_lcp_thread = PFPlcp(name = "{}".format(args.input), args=args, counter=1)  # ...Instantiate a thread and pass a unique ID to it
    pf_lcp_thread.start()                                       # ...Start the thread, invoke the run method
    pf_lcp_thread.join()

    bigrepair_thread = bigrepair(name = "{}".format(args.input), args=args, counter=2)  # ...Instantiate a thread and pass a unique ID to it
    bigrepair_thread.start()                                       # ...Start the thread, invoke the run method
    bigrepair_thread.join()

    SLP_thread = SLP(name = "{}".format(args.input), args=args, counter=2)  # ...Instantiate a thread and pass a unique ID to it
    SLP_thread.start()                                       # ...Start the thread, invoke the run method
    SLP_thread.join()

    PHONI_thread = PHONI(name = "{}".format(args.input), args=args, counter=2)  # ...Instantiate a thread and pass a unique ID to it
    PHONI_thread.start()                                       # ...Start the thread, invoke the run method
    PHONI_thread.join()

    print("Total construction time: {0:.4f}".format(time.time()-start0))
    # ---- print elapsed time to file
    command = "echo Total construction time: {0:.4f}".format(time.time()-start0)
    if(execute_command(command,logfile,logfile_name)!=True):
      return

    # ---- delete intermediate files
    delete_temp_files(args,logfile,logfile_name)

    # --- start checking ---
 
    # --- end checking ---

  print("==== Done")

# delete intermediate files
def delete_temp_files(args,logfile,logfile_name):
    if args.k==False:
      print("==== Deleting temporary files.") # no need to show the command
      command = "rm -f {file}.parse_old {file}.last {file}.bwlast {file}.ilist {file}.bwt.heads {file}.bwt.len {file}.C {file}.dict {file}.dicz {file}.dicz.len {file}.esa {file}.mums.lcp {file}.occ {file}.parse {file}.R {file}.ssa".format(file=args.input)
      #command = "rm -f {file}.parse {file}.parse_old {file}.last {file}.bwlast {file}.dicz {file}.ilist {file}.occ".format(file=args.input)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      for i in range(args.t):
        command = "rm -f {file}.{i}.parse_old {file}.{i}.last".format(file=args.input, i=i)
        if(execute_command(command,logfile,logfile_name)!=True):
          return
      
      command = "rm -f {file}.sai {file}.bwsai".format(file=args.input);
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      for i in range(args.t):
        command = "rm -f {file}.{i}.sai".format(file=args.input, i=i)
        if(execute_command(command,logfile,logfile_name)!=True):
          return


# compute hash digest for a file
def file_digest(name,logfile):
    try:
      hash_command = "{exe} {infile}".format(exe=shasum_exe, infile=name)
      hashsum = subprocess.check_output(hash_command.split(),stderr=logfile)
      hashsum = hashsum.decode("utf-8").split()[0]
    except:
      hashsum = "Error!"
    return hashsum

# execute command: return True is everything OK, False otherwise
def execute_command(command,logfile,logfile_name,outfile=None,env=None):
  try:
    if not outfile:
      outfile = logfile
    subprocess.check_call(command.split(),stdout=logfile,stderr=logfile,env=env)
  except subprocess.CalledProcessError:
    print("Error executing command line:")
    print("\t"+ command)
    print("Check log file: " + logfile_name)
    return False
  return True



if __name__ == '__main__':
    main()
